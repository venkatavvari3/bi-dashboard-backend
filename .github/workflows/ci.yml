name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up test environment
      env:
        SECRET: test-secret-key
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        GOOGLE_CLIENT_ID: test-google-client-id
        EMAIL_ADDRESS: test@example.com
        EMAIL_PASSWORD: test-password
      run: |
        echo "Environment configured for testing"

    - name: Run unit tests
      env:
        SECRET: test-secret-key
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        GOOGLE_CLIENT_ID: test-google-client-id
        EMAIL_ADDRESS: test@example.com
        EMAIL_PASSWORD: test-password
      run: |
        python -m pytest tests/unit/ -v --tb=short

    - name: Run integration tests
      env:
        SECRET: test-secret-key
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        GOOGLE_CLIENT_ID: test-google-client-id
        EMAIL_ADDRESS: test@example.com
        EMAIL_PASSWORD: test-password
      run: |
        python -m pytest tests/integration/ -v --tb=short

    - name: Run tests with coverage
      env:
        SECRET: test-secret-key
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        GOOGLE_CLIENT_ID: test-google-client-id
        EMAIL_ADDRESS: test@example.com
        EMAIL_PASSWORD: test-password
      run: |
        python -m pytest tests/ --cov=app --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort

    - name: Run flake8
      run: |
        flake8 app/ tests/ --max-line-length=100 --ignore=E203,W503

    - name: Check code formatting with black
      run: |
        black --check app/ tests/

    - name: Check import sorting with isort
      run: |
        isort --check-only app/ tests/

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run bandit security scan
      run: |
        bandit -r app/ -f json -o bandit-report.json || true

    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
